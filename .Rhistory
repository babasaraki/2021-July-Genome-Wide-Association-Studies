# Add this info to the initial dataset
left_join(gwasResults, ., by=c("CHR"="CHR")) %>%
# Add a cumulative position of each SNP
arrange(CHR, BP) %>%
mutate( BPcum=BP+tot)
library(dplyr)
don <- gwasResults %>%
# Compute chromosome size
group_by(CHR) %>%
summarise(chr_len=max(BP)) %>%
# Calculate cumulative position of each chromosome
mutate(tot=cumsum(chr_len)-chr_len) %>%
select(-chr_len) %>%
# Add this info to the initial dataset
left_join(gwasResults, ., by=c("CHR"="CHR")) %>%
# Add a cumulative position of each SNP
arrange(CHR, BP) %>%
mutate( BPcum=BP+tot)
axisdf = don %>% group_by(CHR) %>% summarize(center=( max(BPcum) + min(BPcum) ) / 2 )
# Prepare the dataset
don <- gwasResults %>%
# Compute chromosome size
group_by(CHR) %>%
summarise(chr_len=max(BP)) %>%
# Calculate cumulative position of each chromosome
mutate(tot=cumsum(chr_len)-chr_len) %>%
select(-chr_len) %>%
# Add this info to the initial dataset
left_join(gwasResults, ., by=c("CHR"="CHR")) %>%
# Add a cumulative position of each SNP
arrange(CHR, BP) %>%
mutate( BPcum=BP+tot) %>%
# Add highlight and annotation information
mutate( is_highlight=ifelse(SNP %in% snpsOfInterest, "yes", "no")) %>%
# Filter SNP to make the plot lighter
filter(-log10(P)>0.5)
# Prepare X axis
axisdf <- don %>% group_by(CHR) %>% summarize(center=( max(BPcum) + min(BPcum) ) / 2 )
# Prepare text description for each SNP:
don$text <- paste("SNP: ", don$SNP, "\nPosition: ", don$BP, "\nChromosome: ", don$CHR, "\nLOD score:", -log10(don$P) %>% round(2), "\nWhat else do you wanna know", sep="")
# Make the plot
p <- ggplot(don, aes(x=BPcum, y=-log10(P), text=text)) +
# Show all points
geom_point( aes(color=as.factor(CHR)), alpha=0.8, size=1.3) +
scale_color_manual(values = rep(c("grey", "skyblue"), 22 )) +
# custom X axis:
scale_x_continuous( label = axisdf$CHR, breaks= axisdf$center ) +
scale_y_continuous(expand = c(0, 0) ) +     # remove space between plot area and x axis
ylim(0,9) +
# Add highlighted points
geom_point(data=subset(don, is_highlight=="yes"), color="orange", size=2) +
# Custom the theme:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank()
)
ggplotly(p, tooltip="text")
#install.packages("plinkQC")
#install.packages("qqman")
install.packages("CMplot")
library("CMplot")
CMplot(gwasResults, plot.type="c", r=1.6, cir.legend=TRUE,
outward=TRUE, cir.legend.col="black", cir.chr.h=.1 ,chr.den.col="orange", file="jpg",
memo="", dpi=300, chr.labels=seq(1,22))
library(plinkQC)
library(qqman)
library(plotly)
library(dplyr)
head(gwasResults)
knitr::opts_chunk$set(echo = TRUE)
package.dir <- find.package('plinkQC')
indir <- file.path(package.dir, 'extdata')
qcdir <- tempdir()
name <- 'data'
path2plink <- "/Users/hannah/bin/plink"
file.copy(file.path(package.dir, 'extdata/data.HapMapIII.eigenvec'), qcdir)
fail_individuals <- perIndividualQC(indir=indir, qcdir=qcdir, name=name,
refSamplesFile=paste(indir, "/HapMap_ID2Pop.txt",
sep=""),
refColorsFile=paste(indir, "/HapMap_PopColors.txt",
sep=""),
prefixMergedDataset="data.HapMapIII",
path2plink=path2plink, do.run_check_ancestry = FALSE,
interactive=TRUE, verbose=TRUE)
package.dir <- find.package('plinkQC')
indir <- file.path(package.dir, 'extdata')
qcdir <- tempdir()
name <- 'data'
path2plink <- "/Users/keithmitchell/Desktop/Repositories/PlinkWorkflow/Plink_mac_20210606/plink"
file.copy(file.path(package.dir, 'extdata/data.HapMapIII.eigenvec'), qcdir)
fail_individuals <- perIndividualQC(indir=indir, qcdir=qcdir, name=name,
refSamplesFile=paste(indir, "/HapMap_ID2Pop.txt",
sep=""),
refColorsFile=paste(indir, "/HapMap_PopColors.txt",
sep=""),
prefixMergedDataset="data.HapMapIII",
path2plink=path2plink, do.run_check_ancestry = FALSE,
interactive=TRUE, verbose=TRUE)
head(read.csv(paste(indir, "/HapMap_ID2Pop.txt")))
paste(indir, "/HapMap_ID2Pop.txt")
paste(indir, "/HapMap_ID2Pop.txt")
head(read.csv(paste(indir, "/HapMap_ID2Pop.txt")))
paste(indir, "/HapMap_ID2Pop.txt", sep="")
head(read.csv(paste(indir, "/HapMap_ID2Pop.txt", sep="")))
head(read.csv(paste(indir, "/HapMap_ID2Pop.txt", sep="")), sep=" ")
head(read.csv(paste(indir, "/HapMap_PopColors.txt", sep="")), sep=" ")
cran21 <- read.csv("../final_tdt_anno.csv")
cran21 <- read.csv("../../final_tdt_anno.csv")
getwd()
cran21 <- read.csv("final_tdt_anno.csv")
cran21 <- read.csv("final_tdt_anno.csv")
library(plinkQC)
library(qqman)
library(plotly)
library(dplyr)
cran21 <- read.csv("final_tdt_anno.csv")
cran21 <- read.csv("final_tdt_anno.csv", index=TRUE)
cran21 <- read.csv("final_tdt_anno.csv")
cran21 <- read.csv("final_tdt_anno.csv", row.names=NULL)
head(cran21)
cran21 <- read.csv("final_tdt_anno.csv", row.names=NULL)
head(cran21)
# Make the Manhattan plot on the gwasResults dataset
manhattan(gwasResults, chr="CHR", bp="BP", snp="SNP", p="BONF" )
# Make the Manhattan plot on the gwasResults dataset
manhattan(cran21, chr="CHR", bp="BP", snp="SNP", p="BONF" )
# Make the Manhattan plot on the gwasResults dataset
manhattan(cran21, chr="CHR", bp="BP", snp="dbSNP", p="BONF" )
# Make the Manhattan plot on the gwasResults dataset
manhattan(cran21, chr="CHR", bp="SNP", snp="dbSNP", p="BONF" )
plot(cran21$BONF)
# Make the Manhattan plot on the gwasResults dataset
manhattan(cran21, chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ" )
plot(cran21$UNADJ)
View(don)
# Let's highlight them, with a bit of customization on the plot
manhattan(cran21, highlight = c(1))
# A list of SNP of interest is provided with the library:
snpsOfInterest
# A list of SNP of interest is provided with the library:
snpsOfInterest
# Let's highlight them, with a bit of customization on the plot
manhattan(gwasResults, highlight = c("rs370508396"))
# Let's highlight them, with a bit of customization on the plot
manhattan(cran21, highlight = c("rs370508396"))
# Let's highlight them, with a bit of customization on the plot
manhattan(cran21,  chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ", highlight = c("rs370508396"))
manhattan(gwasResults, annotatePval = 0.05)
manhattan(cran21,  chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ", annotatePval = 0.05)
qq(cran21$UN
)
qq(cran21$UNADJ)
knitr::opts_chunk$set(echo = TRUE)
# This is to get the md to stay
rmarkdown::render("GWASvisualizations.Rmd", clean = FALSE)
don <- cran21 %>%
# Compute chromosome size
group_by(CHR) %>%
summarise(chr_len=max(BP)) %>%
# Calculate cumulative position of each chromosome
mutate(tot=cumsum(chr_len)-chr_len) %>%
select(-chr_len) %>%
# Add this info to the initial dataset
left_join(cran21, ., by=c("CHR"="CHR")) %>%
# Add a cumulative position of each SNP
arrange(CHR, BP) %>%
mutate( BPcum=BP+tot)
don <- cran21 %>%
# Compute chromosome size
group_by(CHR) %>%
summarise(chr_len=max(SNP)) %>%
# Calculate cumulative position of each chromosome
mutate(tot=cumsum(chr_len)-chr_len) %>%
select(-chr_len) %>%
# Add this info to the initial dataset
left_join(cran21, ., by=c("CHR"="CHR")) %>%
# Add a cumulative position of each SNP
arrange(CHR, SNP) %>%
mutate( SNPcum=SNP+tot)
don <- cran21 %>%
# Compute chromosome size
group_by(CHR) %>%
summarise(chr_len=max(SNP)) %>%
# Calculate cumulative position of each chromosome
mutate(tot=cumsum(chr_len)-chr_len) %>%
select(-chr_len) %>%
# Add this info to the initial dataset
left_join(cran21, ., by=c("CHR"="CHR")) %>%
# Add a cumulative position of each SNP
arrange(CHR, SNP) %>%
mutate( SNPcum=SNP+tot)
don <- cran21 %>%
# Compute chromosome size
group_by(CHR) %>%
summarise(chr_len=max(SNP)) %>%
# Calculate cumulative position of each chromosome
mutate(tot=cumsum(chr_len)-chr_len) %>%
select(-chr_len) %>%
# Add this info to the initial dataset
left_join(cran21, ., by=c("CHR"="CHR")) %>%
# Add a cumulative position of each SNP
arrange(CHR, SNP) %>%
mutate( SNPcum=SNP+tot)
axisdf = don %>% group_by(CHR) %>% summarize(center=( max(SNPcum) + min(SNPcum) ) / 2 )
don
library(plinkQC)
library(qqman)
library(plotly)
library(dplyr)
cran21 <- read.csv("final_tdt_anno.csv", row.names=NULL)
head(cran21)
plot(cran21$UNADJ)
# Make the Manhattan plot on the gwasResults dataset
manhattan(cran21, chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ" )
head(cran21)
cran21$CHR <- as.integer(cran21$CHR)
# Make the Manhattan plot on the gwasResults dataset
manhattan(cran21, chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ" )
table(cran21$CHR)
# Make the Manhattan plot on the gwasResults dataset
manhattan(cran21, chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ" )
head(cran21)
cran21$CHR <- as.integer(cran21$CHR)
table(cran21$CHR)
head(cran21)
cran21$CHR <- as.integer(cran21$CHR)
cran21$SNP <- as.integer(cran21$SNP)
table(cran21$CHR)
# Make the Manhattan plot on the gwasResults dataset
manhattan(cran21, chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ" )
cran21 <- read.csv("final_tdt_anno.csv", row.names=NULL, stringsAsFactors=FALSE)
head(cran21)
table(cran21$CHR)
# A list of SNP of interest is provided with the library:
snpsOfInterest
# Let's highlight them, with a bit of customization on the plot
manhattan(cran21,  chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ", highlight = c("rs370508396"))
# Make the Manhattan plot on the gwasResults dataset
manhattan(cran21, chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ" )
cran21 <- read.csv("final_tdt_anno.csv", row.names=NULL, stringsAsFactors=FALSE)
head(cran21)
table(cran21$CHR)
plot(cran21$UNADJ)
# Make the Manhattan plot on the gwasResults dataset
manhattan(cran21, chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ" )
# A list of SNP of interest is provided with the library:
snpsOfInterest
# Let's highlight them, with a bit of customization on the plot
manhattan(cran21,  chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ", highlight = c("rs370508396"))
manhattan(gwasResults, annotatePval = 0.05)
manhattan(cran21,  chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ", annotatePval = 0.05)
cran21 <- read.csv("final_tdt_anno.csv", row.names=NULL, stringsAsFactors=FALSE)
head(cran21)
table(cran21$CHR)
plot(cran21$UNADJ)
# Make the Manhattan plot on the gwasResults dataset
manhattan(cran21, chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ" )
# A list of SNP of interest is provided with the library:
snpsOfInterest
# Let's highlight them, with a bit of customization on the plot
manhattan(cran21,  chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ", highlight = c("rs370508396"))
manhattan(gwasResults, annotatePval = 0.05)
manhattan(cran21,  chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ", annotatePval = 0.05)
CMplot(cran21, plot.type="c", r=1.6, cir.legend=TRUE,
outward=TRUE, cir.legend.col="black", cir.chr.h=.1 ,chr.den.col="orange", file="jpg",
memo="", dpi=300, chr.labels=seq(1,22))
cran21 <- read.csv("final_tdt_anno.csv", row.names=NULL, stringsAsFactors=FALSE)
head(cran21)
table(cran21$CHR)
cran21 <- read.csv("final_tdt_anno.csv", row.names=NULL, stringsAsFactors=FALSE)
head(cran21)
table(cran21$CHR)
plot(cran21$UNADJ)
# Make the Manhattan plot on the gwasResults dataset
manhattan(cran21, chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ" )
head(cran21)
cran21$UNADJ <- as.double(cran21$UNADJ)
table(cran21$CHR)
plot(cran21$UNADJ)
# Make the Manhattan plot on the gwasResults dataset
manhattan(cran21, chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ" )
which(is.na(cran21$UNADJ))
cran21[83439]
cran21[,83439]
cran21[83439,]
cran21 <- read.csv("final_tdt_anno.csv", row.names=NULL, stringsAsFactors=FALSE)
cran21[83439,]
cran21 <- read.csv("final_tdt_anno.csv", row.names=NULL, stringsAsFactors=FALSE)
cran21[83439,]
cran21 <- read.csv("final_tdt_anno.csv", row.names=NULL, stringsAsFactors=FALSE)
cran
cran21
summary(cran21$UNADJ)
head(cran21)
cran21$UNADJ <- as.double(cran21$UNADJ)
which(is.na(cran21$UNADJ))
table(cran21$CHR)
plot(cran21$UNADJ)
# Make the Manhattan plot on the gwasResults dataset
manhattan(cran21, chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ" )
table(cran21$UNADJ)
head(cran21)
cran21$UNADJ <- as.double(cran21$UNADJ)
which(is.na(cran21$UNADJ))
table(cran21$CHR)
cran21 <- read.csv("final_tdt_anno.csv", row.names=NULL, stringsAsFactors=FALSE)
cran21
table(cran21$UNADJ)
cran21 <- read.csv("final_tdt_anno.csv", row.names=NULL, stringsAsFactors=FALSE)
head(cran21)
head(cran21)
cran21$UNADJ <- as.double(cran21$UNADJ)
which(is.na(cran21$UNADJ))
table(cran21$CHR)
cran21[,55764]
cran21[55764,]
head(cran21[which(is.na(cran21$UNADJ)),])
cran21[which(is.na(cran21$UNADJ)),]
cran21 <- read.csv("final_tdt_anno.csv", row.names=NULL, stringsAsFactors=FALSE)
head(cran21)
# Make the Manhattan plot on the gwasResults dataset
manhattan(cran21, chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ" )
table(cran21$CHR)
cran21 = cran21[-which(is.na(cran21$UNADJ)),]
plot(cran21$UNADJ)
table(cran21$CHR)
cran21 = cran21[-c(which(is.na(cran21$UNADJ))),]
cran21 <- read.csv("final_tdt_anno.csv", row.names=NULL, stringsAsFactors=FALSE)
head(cran21)
which(is.na(cran21$UNADJ))
table(cran21$CHR)
tdt <- read.csv("master.frq.tdt.csv")
head(tdt)
anno <- read.csv('master.avinput', sep='\t')
head(anno)
anno <- read.csv('~/Downloads/query.output.genome_summary.csv')
head(anno)
final <- merge(tdt, anno, by.x=c("CHR","SNP"), by.y=c("Chr", "Start"))
head(final)
plot(final$UNADJ)
# Make the Manhattan plot on the gwasResults dataset
manhattan(final, chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ" )
table(final$UNADJ)
final$UNADJ <- as.double(final$UNADJ)
# Make the Manhattan plot on the gwasResults dataset
manhattan(final, chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ" )
which(is.na(final$UNADJ))
final[50998,]
finalnoNA <- final[!is.na(final$UNADJ), ]
# Make the Manhattan plot on the gwasResults dataset
manhattan(finalnoNA, chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ" )
# A list of SNP of interest is provided with the library:
snpsOfInterest
# Let's highlight them, with a bit of customization on the plot
manhattan(cran21,  chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ", highlight = c("rs370508396"))
# Let's highlight them, with a bit of customization on the plot
manhattan(finalno,  chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ", highlight = c("rs370508396"))
# Let's highlight them, with a bit of customization on the plot
manhattan(finalnoNA,  chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ", highlight = c("rs370508396"))
which(is.na(final$UNADJ))
tdt$UNADJ <- as.double(tdt$UNADJ)
which(is.na(final$UNADJ))
head(tdt[which(is.na(final$UNADJ)),)
head(tdt[which(is.na(final$UNADJ)],)
head(tdt[which(is.na(final$UNADJ),])
head(tdt[which(is.na(final$UNADJ)),])
head(tdt[which(is.na(tdt$UNADJ)),])
tdtfrq <- read.csv("tdtfrq.tsv")
tdtadj <- read.csv("tdtadj.tsv")
cleantdt <- merge(tdtfrq , tdtadj, by=c("CHR","SNP"))
head(tdtfrq)
tdtfrq <- read.csv("tdtfrq.tsv", sep='\t')
head(tdtfrq)
tdtfrq <- read.csv("tdtfrq.csv")
head(tdtfrq)
tdtfrq <- read.csv("tdtfrq.csv")
head(tdtfrq)
tdtadj <- read.csv("tdtadj.csv")
head(tdtadj)
tdtadj <- read.csv("tdtadj.csv")
tdtadj <- read.csv("tdtadj.csv")
tdtadj <- read.csv("tdtadj.csv", row.names=F)
head(tdtadj)
tdtadj <- read.csv("tdtadj.csv", row.names=T)
tdtadj <- read.csv("tdtadj.csv", row.names=NULL)
head(tdtadj)
tdtadj <- read.csv("tdtadj.csv")
tdtadj <- read.csv("tdtadj.csv", sep=',')
tdtadj <- read.table("tdtadj.csv", sep=',')
tdtadj <- read.csv("tdtadj.csv", row.names=NULL)
head(tdtadj)
tdtadj <- read.csv("tdtadj.csv", row.names=NULL)
head(tdtadj)
cleantdt <- merge(tdtfrq , tdtadj, by=c("CHR","SNP"))
head(cleantdt)
anno <- read.csv('~/Downloads/query.output.genome_summary.csv')
anno <- read.csv('~/Downloads/query.output.genome_summary.csv')
head(anno)
final <- merge(cleantdt, anno, by.x=c("CHR","SNP"), by.y=c("Chr", "Start"))
head(final)
# Make the Manhattan plot on the gwasResults dataset
manhattan(finalnoNA, chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ" )
manhattan(gwasResults)
qq(final$UNADJ)
manhattan(final,  chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ", highlight = c("rs370508396"))
manhattan(gwasResults, annotatePval = 0.05)
manhattan(cran21,  chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ", annotatePval = 0.05)
manhattan(gwasResults, annotatePval = 0.05)
manhattan(final,  chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ", annotatePval = 0.05)
manhattan(gwasResults, annotatePval = 0.1)
manhattan(final,  chr="CHR", bp="SNP", snp="dbSNP", p="UNADJ", annotatePval = 0.1)
manhattan(gwasResults, annotatePval = 0.05)
manhattan(gwasResults, annotatePval = 0.05)
knitr::opts_chunk$set(echo = TRUE)
rmarkdown::render("GWASvisualizations.Rmd", clean = FALSE)
rmarkdown::render("GWASvisualizations.Rmd", clean = FALSE)
rmarkdown::render("GWASvisualizations.Rmd", clean = FALSE)
rmarkdown::render("GWASvisualizations.Rmd", clean = FALSE)
cwd()
getwd()
rmarkdown::render("GWASvisualizations.Rmd", clean = FALSE)
#rmarkdown::render("GWASvisualizations.Rmd", clean = FALSE)
head(final, 200)
plot(final$MAF)
p <- ggplot(final, aes(x=CHR, y=MAF, fill=CHR)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
p
p <- ggplot(final, aes(x=as.factor(CHR), y=MAF, fill=CHR)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
p
geom_violin()
p <- ggplot(final, aes(x=as.factor(CHR), y=MAF, fill=as.factor(CHR)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
p
p <- ggplot(final, aes(x=as.factor(CHR), y=MAF, fill=as.factor(CHR)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
p
p <- ggplot(final, aes(x=as.factor(CHR), y=MAF, fill=as.factor(CHR)) + # fill=name allow to automatically dedicate a color for each group
geom_violin()
p
p <- ggplot(final, aes(x=as.factor(CHR), y=MAF, fill=as.factor(CHR)) + geom_violin()
p
p <- ggplot(final, aes(x=as.factor(CHR), y=MAF, fill=as.factor(CHR)) + geom_violin()
p
p <- ggplot(final, aes(x=as.factor(CHR), y=MAF, fill=as.factor(CHR))) + geom_violin()
p <- ggplot(final, aes(x=as.factor(CHR), y=MAF, fill=as.factor(CHR))) + geom_violin()
p
p <- ggplot(final, aes(x=as.factor(CHR), y=MAF, fill=as.factor(CHR))) + geom_histogram()
p
p <- ggplot(final, aes(x=as.factor(CHR), y=MAF, fill=as.factor(CHR))) + geom_histogram()
p
p <- ggplot(final, aes(x=as.factor(CHR), y=MAF, fill=as.factor(CHR))) + geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
theme_ipsum() +
labs(fill="")
p <- ggplot(final, aes(x=as.factor(CHR), y=MAF, fill=as.factor(CHR))) + geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
labs(fill="")
p
p <- ggplot(final, aes(x=as.factor(CHR), y=MAF)) + geom_histogram( color="#e9ecef", alpha=0.6, stat = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
labs(fill="")
p
p <- ggplot(final, aes(x=MAF, fill=as.factor(CHR))) + geom_histogram( color="#e9ecef", alpha=0.6, stat = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
labs(fill="")
p
p <- ggplot(final, aes(x=MAF, fill=as.factor(CHR))) + geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("#69b3a2", "#404080")) +
labs(fill="")
p
p <- ggplot(final, aes(x=MAF, fill=as.factor(CHR))) + geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("orange", "green")) +
labs(fill="")
p
p <- ggplot(final, aes(x=MAF, fill=as.factor(CHR))) + geom_histogram( color="#e9ecef", alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("blue", "green")) +
labs(fill="")
p
p <- ggplot(final, aes(x=MAF, fill=as.factor(CHR))) + geom_histogram( color="#e9ecef", binwidth = 0.001, alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("blue", "green")) +
labs(fill="")
p <- ggplot(final, aes(x=MAF, fill=as.factor(CHR))) + geom_histogram( color="#e9ecef", binwidth = 0.001, alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("blue", "green")) +
labs(fill="")
p
p <- ggplot(final, aes(x=MAF, fill=as.factor(CHR))) + geom_histogram( color="#e9ecef", binwidth = 0.01, alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("blue", "green")) +
labs(fill="")
p
```{r}
min(final$MAF)
table(final$MAF)
1/220
p <- ggplot(final, aes(x=MAF, fill=as.factor(CHR))) + geom_histogram( color="#e9ecef", binwidth = 0.01, alpha=0.6, position = 'identity') +
scale_fill_manual(values=c("blue", "green")) +
labs(fill="")
download.file("https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2020-Intro_Single_Cell_RNA_Seq/data_analysis/master/data_analysis/GWASvisualization.Rmd",
"GWASvisualization.Rmd")
download.file("https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2020-Intro_Single_Cell_RNA_Seq/master/data_analysis/GWASvisualization.Rmd",
"GWASvisualization.Rmd")
download.file("https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2021-July-Genome-Wide-Association-Studies/main/data_analysis/GWASvisualizations.Rmd",
"GWASvisualization.Rmd")
getwd()
download.file("https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2021-July-Genome-Wide-Association-Studies/main/datasets/tdtadj.csv", "tdtadj.csv")
download.file("https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2021-July-Genome-Wide-Association-Studies/main/datasets/tdtfrq.csv", "tdtfrq.csv")
download.file("https://raw.githubusercontent.com/ucdavis-bioinformatics-training/2021-July-Genome-Wide-Association-Studies/main/datasets/query.output.genome_summary.csv", "query.output.genome_summary.csv")
head(gwasResults)
getwd()
